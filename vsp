#!/usr/bin/env bash
# vivaldi sync prefs - vsp
# https://github.com/kurtlieber/vivaldi-customizations

# this is the profile that will be used as the "gold image" for your other profiles.
# it **must** match exactly the directory in which the profile is stored.
# 99% of the time, it will either be "Default" or "Profile <num>"
#
# you can override this on the command line with '-M /path/to/master/profile/dir'
master_profile="Default"

# don't change this unless you've installed vivaldi's config directory in a non-standard location.
#vivaldi_config_dir="${HOME}/.config/vivaldi" 
vivaldi_config_dir="${HOME}/temp" 
jq=$(which jq)
# in case you want/need to hard-code path to jq
# jq = "/path/to/jq"
###############################################################################
# you shouldn't need to change anything below this line 
###############################################################################

usage() {
    file="$(basename ${0})"
    echo "${file} will update vivaldi-specific preferences, which are not currently supported by Vivaldi sync."
    echo ""
    echo "***close out of vivaldi before running this script or it may (will) overwrite your changes***"
    echo ""
    echo "Currently supports:"
    echo ""
    echo "    - navigation toolbar"
    echo "    - panels toolbar"
    echo "    - custom web panels in the panel toolbar"
    echo ""
    echo "Usage: ${file} [-s] [-v] [-M <value>]"
    echo ""
    echo "Options:"
    echo "  -s           Run silently, with no confirmation"
    echo "  -M <value>   Use this vivaldi profile as the master profile (overrides \$master_profile in script)"
    echo "  -v           Be verbose"
    echo ""
    echo "${file} will pull the key value for the selected Preferences from the master profile,"
    echo "as defined by -M <path> or by \$master_profile in the script itself."
    echo ""
    echo "The master profile defaults to ~/.config/vivaldi/Default"
    echo ""
    echo "Dependencies: jq - the command-line JSON processor"
    exit 1
}

verbose() {
    if [ -z "$verbose" ]; then
    echo "$1"
    fi
}
jq_write() {
    local f="$1"
    local s="$2"
    # it kills me that I have to write the jq query code twice, but I can't figure out how 
    # to write the last line based on a variable
    if [ -n "$f" ] && [ -n "$s" ] && [ -z "$export_file_location" ]; then
        ${jq} \
            --argjson new_nav_toolbar "${nav_toolbar}" \
            --argjson new_panel "${panels}" \
            --argjson new_panel_toolbar "${panels_toolbar}" \
            '.vivaldi.toolbars.navigation = $new_nav_toolbar |
            .vivaldi.panels = $new_panel | 
            .vivaldi.toolbars.panel = $new_panel_toolbar' \
            "${f}" > ${s} #jq can't edit files in place, so we have to create a temp file.
     elif [ -n "$s" ] && [ -n "$export_file_location" ]; then
         ${jq} ${export_file_location} \
            --argjson new_nav_toolbar "${nav_toolbar}" \
            --argjson new_panel "${panels}" \
            --argjson new_panel_toolbar "${panels_toolbar}" \
            '.vivaldi.toolbars.navigation = $new_nav_toolbar |
            .vivaldi.panels = $new_panel | 
            .vivaldi.toolbars.panel = $new_panel_toolbar' \
            > ${s} 
    else 
        echo "something bad happened in the jq_write function"
        verbose "\$f = ${f}" # debugging
        verbose "\$s = ${s}" # debugging
    fi
} 

error() {
    local m="$1"
    local c="$2"
    echo "Error: ${1}"
    exit $2
}

pref_file_location="${vivaldi_config_dir%/}/${master_profile}"
export_file_location=""

while getopts ":sM:vei" opt; do
    case "$opt" in
        s)
            silent=1
            ;;
        M)
            pref_file_location="$(echo "${OPTARG}" | sed 's/^"\(.*\)"$/\1/')" # in case the dir path is enclosed in quotes.  might be a better way to handle this - if so, tell me
            pref_file_location="$(eval echo ${pref_file_location})" #in case someone uses ~/ for their home dir.  again, might be a better way.  I'm all ears
            ;;
        v)
            verbose=1
            ;;
        e)
            if [ -z "${OPTARG}" ]; then
		error "Missing argument to -e. path expected"  1
	    else
		export_file_location="$(echo "${OPTARG}" | sed 's/^"\(.*\)"$/\1/')"
		export_file_location="$(eval echo ${export_file_location})"
	    fi
            ;;
        i)
            if [ -z "${OPTARG}" ]; then
		error "Missing argument to -i. path expected"  1
	    else
		import_file_location="$(echo "${OPTARG}" | sed 's/^"\(.*\)"$/\1/')"
		import_file_location="$(eval echo ${import_file_location})"
	    fi
            ;;
        \?)
            usage
            ;;
    esac
done
if [ ! -x "${jq}" ]; then
    echo "Missing jq dependency.  Please ensure it is installed and available in your \$PATH"
    echo ""
    usage
fi
if [ -n "${import_file_location}" ]; then 
    
    if [ ! -f "${import_file_location}" ]; then
        error "${import_file_location} is either missing or you do not have access."  1
    else
	master_file="${import_file_location}"
else
    if [ ! -d "${pref_file_location}" ]; then
	error "Missing or unknown profile directory.  Please check \$master_profile in the script and try again." 1
    fi
    if [ ! -f "${pref_file_location}/Preferences" ]; then
	error "Missing Preferences file in ${pref_file_location}." 1
    else
	master_file="${pref_file_location}/Preferences"
    fi
fi
profile_name=$(${jq} -r '.profile.name' "${master_file}")
nav_toolbar=$(${jq} -r '.vivaldi.toolbars.navigation' "${master_file}")
panels=$(${jq} -r '.vivaldi.panels' "${master_file}")
panels_toolbar=$(${jq} -r '.vivaldi.toolbars.panel' "${master_file}")

# currently here for debugging.  will eventually remove.
verbose "-M set to ${pref_file_location}" 
verbose "Profile name = ${profile_name}"
verbose "Nav toolbar = ${nav_toolbar}"



if [ -z "$silent" ]; then
    read -rp "You're about to use the ${profile_name} profile. Is that correct? (Y/n): " confirm
    confirm="${confirm,,}"
    if [ "$confirm" != "y" ] && [ "$confirm" != "yes" ] && [ "$confirm" != "" ]; then
        verbose "Operation canceled."
        exit 1
    fi
fi

if [ -n "$export_file_location" ]; then
    pref_file=""

    if [ ! -d "$(dirname "$export_file_location")" ]; then
        echo "Error: The directory $(dirname "$export_file_location") does not exist."
        exit 1
    fi

    if [ -e "$export_file_location" ]; then
        read -rp "The file already exists. Do you want to overwrite it? (Y/n): " overwrite
        overwrite="${overwrite,,}"
        if [ "$overwrite" != "y" ] && [ "$overwrite" != "yes" ] && [ "$overwrite" != "" ]; then
            verbose "File not saved."
            exit 0
        fi
    fi
    
    if [ ! -w "$(dirname "$export_file_location")" ]; then
        echo "Error: You do not have write permissions to the directory $(dirname "$export_file_location")."
        echo "save the file somewhere else and for the love of god do not use sudo to re-run the script"
        exit 1
    fi
    jq_write "${pref_file}" "${export_file_location}"
else
    for dir in "$vivaldi_config_dir"/Profile* "$vivaldi_config_dir/Default"; do
        if [ "${dir}" != "${pref_file_location}" ]; then
            if [ -f "${dir}/Preferences" ]; then
                pref_file="${dir}/Preferences"
                pref_file_bak="${dir}/Preferences.bak"
                save_file="/tmp/NewPreferences"
                verbose "Creating backup of ${pref_file} at ${pref_file_bak}"

                cp "${pref_file}" "${pref_file_bak}" #make a backup, just in case

                jq_write "${pref_file}" "${save_file}"
                
                verbose "Updating ${pref_file}"
                
                if [ -s "${save_file}" ] && [ -s "${pref_file_bak}" ]; then
                    verbose "Installing new Preferences file.  Old one can be restored from backup at ${pref_file_bak} if needed"
                    mv "${save_file}" "${pref_file}"
                fi
            fi
        fi
    done
fi
